/**
 * Simple Hello World API
 * API for Hello World Service.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');

let defaultBasePath = 'https://localhost:8001/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

class ObjectSerializer {

    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toString();
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}

export class Exchange {
    'base': string;
    'date': string;
    'rates': ExchangeRates;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "base",
            "baseName": "base",
            "type": "string"
        },
        {
            "name": "date",
            "baseName": "date",
            "type": "string"
        },
        {
            "name": "rates",
            "baseName": "rates",
            "type": "ExchangeRates"
        }    ];

    static getAttributeTypeMap() {
        return Exchange.attributeTypeMap;
    }
}

export class ExchangeRates {
    'aUD': string;
    'bGN': string;
    'bRL': string;
    'cAD': string;
    'cHF': string;
    'cNY': string;
    'cZK': string;
    'dKK': string;
    'gBP': string;
    'hKD': string;
    'hRK': string;
    'hUF': string;
    'iDR': string;
    'iLS': string;
    'iNR': string;
    'iSK': string;
    'jPY': string;
    'kRW': string;
    'mXN': string;
    'mYR': string;
    'nOK': string;
    'nZD': string;
    'pHP': string;
    'pLN': string;
    'rON': string;
    'rUB': string;
    'sEK': string;
    'sGD': string;
    'tHB': string;
    'tRY': string;
    'uSD': string;
    'zAR': string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "aUD",
            "baseName": "AUD",
            "type": "string"
        },
        {
            "name": "bGN",
            "baseName": "BGN",
            "type": "string"
        },
        {
            "name": "bRL",
            "baseName": "BRL",
            "type": "string"
        },
        {
            "name": "cAD",
            "baseName": "CAD",
            "type": "string"
        },
        {
            "name": "cHF",
            "baseName": "CHF",
            "type": "string"
        },
        {
            "name": "cNY",
            "baseName": "CNY",
            "type": "string"
        },
        {
            "name": "cZK",
            "baseName": "CZK",
            "type": "string"
        },
        {
            "name": "dKK",
            "baseName": "DKK",
            "type": "string"
        },
        {
            "name": "gBP",
            "baseName": "GBP",
            "type": "string"
        },
        {
            "name": "hKD",
            "baseName": "HKD",
            "type": "string"
        },
        {
            "name": "hRK",
            "baseName": "HRK",
            "type": "string"
        },
        {
            "name": "hUF",
            "baseName": "HUF",
            "type": "string"
        },
        {
            "name": "iDR",
            "baseName": "IDR",
            "type": "string"
        },
        {
            "name": "iLS",
            "baseName": "ILS",
            "type": "string"
        },
        {
            "name": "iNR",
            "baseName": "INR",
            "type": "string"
        },
        {
            "name": "iSK",
            "baseName": "ISK",
            "type": "string"
        },
        {
            "name": "jPY",
            "baseName": "JPY",
            "type": "string"
        },
        {
            "name": "kRW",
            "baseName": "KRW",
            "type": "string"
        },
        {
            "name": "mXN",
            "baseName": "MXN",
            "type": "string"
        },
        {
            "name": "mYR",
            "baseName": "MYR",
            "type": "string"
        },
        {
            "name": "nOK",
            "baseName": "NOK",
            "type": "string"
        },
        {
            "name": "nZD",
            "baseName": "NZD",
            "type": "string"
        },
        {
            "name": "pHP",
            "baseName": "PHP",
            "type": "string"
        },
        {
            "name": "pLN",
            "baseName": "PLN",
            "type": "string"
        },
        {
            "name": "rON",
            "baseName": "RON",
            "type": "string"
        },
        {
            "name": "rUB",
            "baseName": "RUB",
            "type": "string"
        },
        {
            "name": "sEK",
            "baseName": "SEK",
            "type": "string"
        },
        {
            "name": "sGD",
            "baseName": "SGD",
            "type": "string"
        },
        {
            "name": "tHB",
            "baseName": "THB",
            "type": "string"
        },
        {
            "name": "tRY",
            "baseName": "TRY",
            "type": "string"
        },
        {
            "name": "uSD",
            "baseName": "USD",
            "type": "string"
        },
        {
            "name": "zAR",
            "baseName": "ZAR",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ExchangeRates.attributeTypeMap;
    }
}

export class Greeting {
    'name': string;
    'surname': string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "surname",
            "baseName": "surname",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Greeting.attributeTypeMap;
    }
}

export class Hello {
    'msg': string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Hello.attributeTypeMap;
    }
}

export class ModelError {
    'message': string;
    'extra': any;
    'code': string;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "any"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ModelError.attributeTypeMap;
    }
}


let enumsMap: {[index: string]: any} = {
}

let typeMap: {[index: string]: any} = {
    "Exchange": Exchange,
    "ExchangeRates": ExchangeRates,
    "Greeting": Greeting,
    "Hello": Hello,
    "ModelError": ModelError,
}

export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: localVarRequest.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string;

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string;

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(_: localVarRequest.Options): void {
        // Do nothing
    }
}

export enum ExchangeApiApiKeys {
}

export class ExchangeApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ExchangeApiApiKeys, value: string) {
        (this.authentications as any)[ExchangeApiApiKeys[key]].apiKey = value;
    }
    /**
     * Get the latest euro exchange rates
     */
    public exchangeGet () : Promise<{ response: http.ClientResponse; body: Exchange;  }> {
        const localVarPath = this.basePath + '/exchange/latest';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Exchange;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Exchange");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum HelloApiApiKeys {
}

export class HelloApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: HelloApiApiKeys, value: string) {
        (this.authentications as any)[HelloApiApiKeys[key]].apiKey = value;
    }
    /**
     * Returns Hello world string via GET.
     * @param name Name
     * @param surname Surname
     */
    public helloWorldGet (name: string, surname: string) : Promise<{ response: http.ClientResponse; body: Hello;  }> {
        const localVarPath = this.basePath + '/hello';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling helloWorldGet.');
        }

        // verify required parameter 'surname' is not null or undefined
        if (surname === null || surname === undefined) {
            throw new Error('Required parameter surname was null or undefined when calling helloWorldGet.');
        }

        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }

        if (surname !== undefined) {
            localVarQueryParameters['surname'] = ObjectSerializer.serialize(surname, "string");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Hello;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Hello");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns Hello world string via POST.
     * @param greeting Name of greeting
     */
    public helloWorldPost (greeting: Greeting) : Promise<{ response: http.ClientResponse; body: Hello;  }> {
        const localVarPath = this.basePath + '/hello';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'greeting' is not null or undefined
        if (greeting === null || greeting === undefined) {
            throw new Error('Required parameter greeting was null or undefined when calling helloWorldPost.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(greeting, "Greeting")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Hello;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Hello");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
