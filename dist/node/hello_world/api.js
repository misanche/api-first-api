"use strict";
/**
 * Simple Hello World API
 * API for Hello World Service.
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var localVarRequest = require("request");
var Promise = require("bluebird");
var defaultBasePath = 'https://localhost:8001/api';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
/* tslint:disable:no-unused-variable */
var primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
var ObjectSerializer = /** @class */ (function () {
    function ObjectSerializer() {
    }
    ObjectSerializer.findCorrectType = function (data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            var discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    };
    ObjectSerializer.serialize = function (data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            var subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            var transformedData = [];
            for (var index in data) {
                var date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toString();
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // get the map for the correct type.
            var attributeTypes = typeMap[type].getAttributeTypeMap();
            var instance = {};
            for (var index in attributeTypes) {
                var attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    };
    ObjectSerializer.deserialize = function (data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            var subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            var transformedData = [];
            for (var index in data) {
                var date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            var instance = new typeMap[type]();
            var attributeTypes = typeMap[type].getAttributeTypeMap();
            for (var index in attributeTypes) {
                var attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    };
    return ObjectSerializer;
}());
var Exchange = /** @class */ (function () {
    function Exchange() {
    }
    Exchange.getAttributeTypeMap = function () {
        return Exchange.attributeTypeMap;
    };
    Exchange.discriminator = undefined;
    Exchange.attributeTypeMap = [
        {
            "name": "base",
            "baseName": "base",
            "type": "string"
        },
        {
            "name": "date",
            "baseName": "date",
            "type": "string"
        },
        {
            "name": "rates",
            "baseName": "rates",
            "type": "ExchangeRates"
        }
    ];
    return Exchange;
}());
exports.Exchange = Exchange;
var ExchangeRates = /** @class */ (function () {
    function ExchangeRates() {
    }
    ExchangeRates.getAttributeTypeMap = function () {
        return ExchangeRates.attributeTypeMap;
    };
    ExchangeRates.discriminator = undefined;
    ExchangeRates.attributeTypeMap = [
        {
            "name": "aUD",
            "baseName": "AUD",
            "type": "string"
        },
        {
            "name": "bGN",
            "baseName": "BGN",
            "type": "string"
        },
        {
            "name": "bRL",
            "baseName": "BRL",
            "type": "string"
        },
        {
            "name": "cAD",
            "baseName": "CAD",
            "type": "string"
        },
        {
            "name": "cHF",
            "baseName": "CHF",
            "type": "string"
        },
        {
            "name": "cNY",
            "baseName": "CNY",
            "type": "string"
        },
        {
            "name": "cZK",
            "baseName": "CZK",
            "type": "string"
        },
        {
            "name": "dKK",
            "baseName": "DKK",
            "type": "string"
        },
        {
            "name": "gBP",
            "baseName": "GBP",
            "type": "string"
        },
        {
            "name": "hKD",
            "baseName": "HKD",
            "type": "string"
        },
        {
            "name": "hRK",
            "baseName": "HRK",
            "type": "string"
        },
        {
            "name": "hUF",
            "baseName": "HUF",
            "type": "string"
        },
        {
            "name": "iDR",
            "baseName": "IDR",
            "type": "string"
        },
        {
            "name": "iLS",
            "baseName": "ILS",
            "type": "string"
        },
        {
            "name": "iNR",
            "baseName": "INR",
            "type": "string"
        },
        {
            "name": "iSK",
            "baseName": "ISK",
            "type": "string"
        },
        {
            "name": "jPY",
            "baseName": "JPY",
            "type": "string"
        },
        {
            "name": "kRW",
            "baseName": "KRW",
            "type": "string"
        },
        {
            "name": "mXN",
            "baseName": "MXN",
            "type": "string"
        },
        {
            "name": "mYR",
            "baseName": "MYR",
            "type": "string"
        },
        {
            "name": "nOK",
            "baseName": "NOK",
            "type": "string"
        },
        {
            "name": "nZD",
            "baseName": "NZD",
            "type": "string"
        },
        {
            "name": "pHP",
            "baseName": "PHP",
            "type": "string"
        },
        {
            "name": "pLN",
            "baseName": "PLN",
            "type": "string"
        },
        {
            "name": "rON",
            "baseName": "RON",
            "type": "string"
        },
        {
            "name": "rUB",
            "baseName": "RUB",
            "type": "string"
        },
        {
            "name": "sEK",
            "baseName": "SEK",
            "type": "string"
        },
        {
            "name": "sGD",
            "baseName": "SGD",
            "type": "string"
        },
        {
            "name": "tHB",
            "baseName": "THB",
            "type": "string"
        },
        {
            "name": "tRY",
            "baseName": "TRY",
            "type": "string"
        },
        {
            "name": "uSD",
            "baseName": "USD",
            "type": "string"
        },
        {
            "name": "zAR",
            "baseName": "ZAR",
            "type": "string"
        }
    ];
    return ExchangeRates;
}());
exports.ExchangeRates = ExchangeRates;
var Greeting = /** @class */ (function () {
    function Greeting() {
    }
    Greeting.getAttributeTypeMap = function () {
        return Greeting.attributeTypeMap;
    };
    Greeting.discriminator = undefined;
    Greeting.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "surname",
            "baseName": "surname",
            "type": "string"
        }
    ];
    return Greeting;
}());
exports.Greeting = Greeting;
var Hello = /** @class */ (function () {
    function Hello() {
    }
    Hello.getAttributeTypeMap = function () {
        return Hello.attributeTypeMap;
    };
    Hello.discriminator = undefined;
    Hello.attributeTypeMap = [
        {
            "name": "msg",
            "baseName": "msg",
            "type": "string"
        }
    ];
    return Hello;
}());
exports.Hello = Hello;
var ModelError = /** @class */ (function () {
    function ModelError() {
    }
    ModelError.getAttributeTypeMap = function () {
        return ModelError.attributeTypeMap;
    };
    ModelError.discriminator = undefined;
    ModelError.attributeTypeMap = [
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "extra",
            "baseName": "extra",
            "type": "any"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        }
    ];
    return ModelError;
}());
exports.ModelError = ModelError;
var enumsMap = {};
var typeMap = {
    "Exchange": Exchange,
    "ExchangeRates": ExchangeRates,
    "Greeting": Greeting,
    "Hello": Hello,
    "ModelError": ModelError,
};
var HttpBasicAuth = /** @class */ (function () {
    function HttpBasicAuth() {
    }
    HttpBasicAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    };
    return HttpBasicAuth;
}());
exports.HttpBasicAuth = HttpBasicAuth;
var ApiKeyAuth = /** @class */ (function () {
    function ApiKeyAuth(location, paramName) {
        this.location = location;
        this.paramName = paramName;
    }
    ApiKeyAuth.prototype.applyToRequest = function (requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    };
    return ApiKeyAuth;
}());
exports.ApiKeyAuth = ApiKeyAuth;
var OAuth = /** @class */ (function () {
    function OAuth() {
    }
    OAuth.prototype.applyToRequest = function (requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    };
    return OAuth;
}());
exports.OAuth = OAuth;
var VoidAuth = /** @class */ (function () {
    function VoidAuth() {
    }
    VoidAuth.prototype.applyToRequest = function (_) {
        // Do nothing
    };
    return VoidAuth;
}());
exports.VoidAuth = VoidAuth;
var ExchangeApiApiKeys;
(function (ExchangeApiApiKeys) {
})(ExchangeApiApiKeys = exports.ExchangeApiApiKeys || (exports.ExchangeApiApiKeys = {}));
var ExchangeApi = /** @class */ (function () {
    function ExchangeApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ExchangeApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExchangeApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    ExchangeApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    ExchangeApi.prototype.setApiKey = function (key, value) {
        this.authentications[ExchangeApiApiKeys[key]].apiKey = value;
    };
    /**
     * Get the latest euro exchange rates
     */
    ExchangeApi.prototype.exchangeGet = function () {
        var localVarPath = this.basePath + '/exchange/latest';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Exchange");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return ExchangeApi;
}());
exports.ExchangeApi = ExchangeApi;
var HelloApiApiKeys;
(function (HelloApiApiKeys) {
})(HelloApiApiKeys = exports.HelloApiApiKeys || (exports.HelloApiApiKeys = {}));
var HelloApi = /** @class */ (function () {
    function HelloApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(HelloApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HelloApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    HelloApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    HelloApi.prototype.setApiKey = function (key, value) {
        this.authentications[HelloApiApiKeys[key]].apiKey = value;
    };
    /**
     * Returns Hello world string via GET.
     * @param name Name
     * @param surname Surname
     */
    HelloApi.prototype.helloWorldGet = function (name, surname) {
        var localVarPath = this.basePath + '/hello';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling helloWorldGet.');
        }
        // verify required parameter 'surname' is not null or undefined
        if (surname === null || surname === undefined) {
            throw new Error('Required parameter surname was null or undefined when calling helloWorldGet.');
        }
        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }
        if (surname !== undefined) {
            localVarQueryParameters['surname'] = ObjectSerializer.serialize(surname, "string");
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Hello");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Returns Hello world string via POST.
     * @param greeting Name of greeting
     */
    HelloApi.prototype.helloWorldPost = function (greeting) {
        var localVarPath = this.basePath + '/hello';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'greeting' is not null or undefined
        if (greeting === null || greeting === undefined) {
            throw new Error('Required parameter greeting was null or undefined when calling helloWorldPost.');
        }
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(greeting, "Greeting")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Hello");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return HelloApi;
}());
exports.HelloApi = HelloApi;
//# sourceMappingURL=api.js.map